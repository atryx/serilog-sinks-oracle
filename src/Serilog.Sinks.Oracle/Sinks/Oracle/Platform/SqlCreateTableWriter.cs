using System.Data;
using System.Globalization;
using static System.FormattableString;

namespace Serilog.Sinks.Oracle.Platform;
internal class SqlCreateTableWriter : ISqlCreateTableWriter
{
    private readonly string _schemaName;
    private readonly string _tableName;
    private readonly ColumnOptions _columnOptions;
    private readonly IDataTableCreator _dataTableCreator;

    public SqlCreateTableWriter(string schemaName, string tableName, ColumnOptions columnOptions, IDataTableCreator dataTableCreator)
    {
        _schemaName = schemaName ?? throw new ArgumentNullException(nameof(schemaName));
        _tableName = tableName ?? throw new ArgumentNullException(nameof(tableName));
        _columnOptions = columnOptions ?? throw new ArgumentNullException(nameof(columnOptions));
        _dataTableCreator = dataTableCreator ?? throw new ArgumentNullException(nameof(dataTableCreator));
    }

    public string TableName => _tableName;

    public string GetSql()
    {
        var sql = new StringBuilder();
        var ix = new StringBuilder();
        var indexCount = 1;

        // start schema check and DDL (wrap in EXEC to make a separate batch)

        // start table-creatin batch and DDL
        sql.AppendLine("DECLARE");
        sql.AppendLine("table_exists NUMBER;");
        sql.AppendLine("BEGIN");
        sql.AppendLine(Invariant($"SELECT COUNT(*) INTO table_exists FROM USER_TABLES WHERE TABLE_NAME = UPPER('{_tableName}');"));
        sql.AppendLine(Invariant($"IF table_exists = 0 THEN"));
        sql.AppendLine(Invariant($"EXECUTE IMMEDIATE 'CREATE TABLE {_schemaName}.{_tableName} ( "));

        using (var dataTable = _dataTableCreator.CreateDataTable())
        {
            // build column list
            var i = 1;
            foreach (DataColumn column in dataTable.Columns)
            {
                var common = (OracleColumn)column.ExtendedProperties["SqlColumn"];

                sql.Append(GetColumnDDL(common));
                if (dataTable.Columns.Count > i++) sql.Append(',');
                sql.AppendLine();

                // collect non-PK indexes for separate output after the table DDL
                if (common != null && common.NonClusteredIndex && common != _columnOptions.PrimaryKey)
                    ix.AppendLine(Invariant($"CREATE NONCLUSTERED INDEX [IX{indexCount++}_{_tableName}] ON [{_schemaName}].[{_tableName}] ([{common.ColumnName}]);"));
            }
        }

        sql.AppendLine(",");

        // primary key constraint at the end of the table DDL
        if (_columnOptions.PrimaryKey != null)
        {
            var clustering = (_columnOptions.PrimaryKey.NonClusteredIndex ? "NON" : string.Empty);
            sql.AppendLine(Invariant($" CONSTRAINT PK_{_tableName} PRIMARY KEY {clustering}({_columnOptions.PrimaryKey.ColumnName})"));
        }

        // end of CREATE TABLE
        sql.AppendLine(")';");

        // CCI is output separately after table DDL
        if (_columnOptions.ClusteredColumnstoreIndex)
            sql.AppendLine(Invariant($"CREATE CLUSTERED COLUMNSTORE INDEX [CCI_{_tableName}] ON [{_schemaName}].[{_tableName}]"));

        // output any extra non-clustered indexes
        sql.Append(ix);

        // end if
        sql.AppendLine("END IF;");

        // end of batch
        sql.AppendLine("END;");

        return sql.ToString();
    }

    // Examples of possible output:
    // [Id] BIGINT IDENTITY(1,1) NOT NULL
    // [Message] VARCHAR(1024) NULL
    private static string GetColumnDDL(OracleColumn column)
    {
        var sb = new StringBuilder();

        sb.Append(Invariant($"{column.ColumnName} "));

        // TODO: fix this mapping to Oracle, eg: INT32 should be NUMBER
        sb.Append(column.DataType.ToString().ToUpperInvariant());

        if (OracleDataTypes.DataLengthRequired.Contains(column.DataType))
            sb.Append('(').Append(column.DataLength == -1 ? "4000" : column.DataLength.ToString(CultureInfo.InvariantCulture)).Append(')');

        if (column.StandardColumnIdentifier == StandardColumn.Id)
            sb.Append(" GENERATED BY DEFAULT AS IDENTITY");

        sb.Append(column.AllowNull ? " NULL" : " NOT NULL");

        return sb.ToString();
    }
}
